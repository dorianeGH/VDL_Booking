datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

// App models : + nationalityid + numero de tel + adress
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?

  accounts Account[]
  sessions Session[]
  booking  Booking[]
  // Optional for WebAuthn support
  //Authenticator Authenticator[]

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  Authenticator Authenticator[]
  Review        Review[]
}

model Booking {
  id             String   @id @default(cuid())
  bookingDetails String?
  checkinDate    DateTime
  checkoutDate   DateTime
  totalAmount    Int
  advanceAmount  Int
  refundAmount   Int
  reviewText     String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reviews Review[]
}

model Review {
  id     String  @id @default(cuid())
  rating Int
  text   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bookingId String
  booking   Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  User      User?   @relation(fields: [userId], references: [id])
  userId    String?
}
